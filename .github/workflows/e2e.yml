name: e2e-test

on:
  push:
    branches: [master, develop, "feat/*"]
  pull_request:
    branches: [master, develop, "feat/*"]

jobs:
  nodejs-step:
    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x, 18.x, 20.x]
        os: [macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      # - name: Install Windows Build Tools (if needed)
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     npm install -g windows-build-tools
      - name: Install Node.js dependencies
        run: npm install
      - name: Compile contract
        run: npx hardhat compile
      - name: Start local blockchain
        run: npx hardhat node & sleep 5

  python-step:
 

    steps:
  - name: Checkout Code
    uses: actions/checkout@v4

  - name: Set up Node.js Environment
    uses: actions/setup-node@v4
    with:
      node-version: '18' # Example: Specify a fixed Node.js version

  - name: Install Project Dependencies
    run: npm ci

  - name: Run Build Process
    run: npm run build

  - name: Run Unit Tests
    run: npm test -- --coverage

  - name: Run E2E Tests (Cypress)
    uses: cypress-io/github-action@v6
    with:
      start: npm start
      wait-on: 'http://localhost:3000'

  - name: Lint Code
    run: npm run lint

  - name: Format Code (Check Only)
    run: npm run format -- --check

  - name: Build Docker Image
    uses: docker/build-push-action@v5
    with:
      context: .
      push: false
      tags: my-app:latest

  - name: Scan Docker Image for Vulnerabilities
    uses: aquasecurity/trivy-action@master
    with:
      image-ref: 'my-app:latest'
      format: 'table'
      exit-code: '1'
      severity: 'CRITICAL,HIGH'

  - name: Cache Build Artifacts
    uses: actions/cache@v4
    with:
      path: dist/
      key: ${{ runner.os }}-build-${{ github.sha }}

  - name: Upload Build Artifacts
    uses: actions/upload-artifact@v4
    with:
      name: my-app-build
      path: dist/

  - name: Deploy to Staging Environment
    if: github.ref == 'refs/heads/main'
    run: echo "Deploying to staging..." # Replace with actual deployment command
    env:
      STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}

  - name: Notify Slack on Success
    if: success()
    uses: rtCamp/action-slack-notify@v2
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_MESSAGE: 'Deployment to staging successful for ${{ github.ref_name }}!'

  - name: Notify Slack on Failure
    if: failure()
    uses: rtCamp/action-slack-notify@v2
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_MESSAGE: 'Workflow failed for ${{ github.ref_name }}. Check logs!'

  - name: Generate Release Notes
    if: startsWith(github.ref, 'refs/tags/')
    run: echo "Generating release notes for tag ${{ github.ref_name }}" # Placeholder

  - name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    uses: softprops/action-gh-release@v1
    with:
      tag_name: ${{ github.ref }}
      name: Release ${{ github.ref }}
      body: |
        Automatically generated release from GitHub Actions for tag ${{ github.ref_name }}.
        See changes [here](https://github.com/${{ github.repository }}/compare/${{ github.event.repository.default_branch }}...${{ github.ref_name }}).
      draft: false
      prerelease: false
